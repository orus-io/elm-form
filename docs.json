[{"name":"Enum","comment":"\n\n@docs Enum, enum\n\n","unions":[],"aliases":[{"name":"Enum","comment":" A Enum facilitate listing and converting enumerated values to/from String\n","args":["option"],"type":"{ all : List.List ( option, String.String ), values : List.List option, toString : option -> String.String, fromString : String.String -> Maybe.Maybe option }"}],"values":[{"name":"enum","comment":" Builds a Enum given a list of values and their String representation\n\nThe String values should have to duplicates.\n\n","type":"List.List ( option, String.String ) -> Enum.Enum option"}],"binops":[]},{"name":"Form","comment":"\n\n\n# Form\n\n@docs Msg, Model, Form\n\n\n# Building a form\n\n@docs Builder, init, field, fieldWithState, list, listWithState, group, groupList, finalize\n\n\n# View arguments\n\n@docs FieldViewState, FieldListViewState, FieldListItemViewState, FieldComponentViewState, FieldComponentListViewState, FieldComponentListItemViewState, GroupListView\n\n","unions":[{"name":"Builder","comment":" Intermediate type for building forms\n","args":["validate","view","model","customError","sharedMsg","output","stackModel","stackMsg","topStackMsg"],"cases":[]},{"name":"Msg","comment":" Form Msg\n","args":["stackMsg"],"cases":[]}],"aliases":[{"name":"FieldComponentListItemViewState","comment":" ViewState of a component list item passed to view function\n","args":["customError","a","stackMsg","componentModel","compomentMsg"],"type":"{ viewstate : Form.FieldComponentViewState customError a stackMsg componentModel compomentMsg, onRemove : Form.Msg stackMsg }"},{"name":"FieldComponentListViewState","comment":" ViewState of a component list passed to view function\n","args":["customError","a","stackMsg","componentModel","compomentMsg"],"type":"{ onAppend : Form.Msg stackMsg, items : List.List (Form.FieldComponentListItemViewState customError a stackMsg componentModel compomentMsg) }"},{"name":"FieldComponentViewState","comment":" ViewState of a component (ie a field with state) passed to view function\n","args":["customError","a","stackMsg","componentModel","componentMsg"],"type":"{ state : Form.Data.FieldState customError a, model : componentModel, onInput : Form.InputType.InputType -> a -> Form.Msg stackMsg, onEmpty : Form.InputType.InputType -> Form.Msg stackMsg, onBlur : Form.Msg stackMsg, onFocus : Form.Msg stackMsg, toMsg : componentMsg -> Form.Msg stackMsg }"},{"name":"FieldListItemViewState","comment":" ViewState of a list of fields item passed to view function\n","args":["customError","a","stackMsg"],"type":"{ viewstate : Form.FieldViewState customError a stackMsg, onRemove : Form.Msg stackMsg }"},{"name":"FieldListViewState","comment":" ViewState of a list of fields passed to view function\n","args":["customError","a","stackMsg"],"type":"{ onAppend : Form.Msg stackMsg, items : List.List (Form.FieldListItemViewState customError a stackMsg) }"},{"name":"FieldViewState","comment":" ViewState of a field passed to view function\n","args":["customError","a","stackMsg"],"type":"{ state : Form.Data.FieldState customError a, onInput : Form.InputType.InputType -> a -> Form.Msg stackMsg, onEmpty : Form.InputType.InputType -> Form.Msg stackMsg, onBlur : Form.Msg stackMsg, onFocus : Form.Msg stackMsg }"},{"name":"Form","comment":" A form\n","args":["customError","output","sharedMsg","model","view","stackModel","stackMsg"],"type":"{ init : model -> Maybe.Maybe output -> ( Form.Model customError output stackModel, Effect.Effect sharedMsg (Form.Msg stackMsg) ), update : model -> Form.Msg stackMsg -> Form.Model customError output stackModel -> ( Form.Model customError output stackModel, Effect.Effect sharedMsg (Form.Msg stackMsg) ), subscriptions : model -> Form.Model customError output stackModel -> Platform.Sub.Sub (Form.Msg stackMsg), view : model -> Form.Model customError output stackModel -> view }"},{"name":"GroupListView","comment":" Group list view, passed to the view function\n","args":["view","stackMsg"],"type":"{ onAppend : Form.Msg stackMsg, items : List.List view }"},{"name":"Model","comment":" Form model\n","args":["customError","output","stackModel"],"type":"{ formData : Form.Data.Model customError, output : Maybe.Maybe output, stack : stackModel }"}],"values":[{"name":"field","comment":" Add a single stateless field to a form builder\n","type":"String.String -> Form.Field.FieldDef output a -> Form.Builder (model -> Form.FieldValidate customError a -> validate) (Form.FieldViewState customError a topStackMsg -> view) model customError sharedMsg output stackModel stackMsg topStackMsg -> Form.Builder (model -> validate) view model customError sharedMsg output stackModel stackMsg topStackMsg"},{"name":"fieldWithState","comment":" Add a single statefull field to a form builder\n","type":"String.String -> Form.Field.FieldDef output a -> (Form.Field.FieldDef output a -> Form.FieldStack.FieldComponent customError a componentModel sharedMsg componentMsg) -> Form.Builder (model -> Form.FieldValidate customError a -> validate) (Form.FieldComponentViewState customError a topStackMsg componentModel componentMsg -> view) model customError sharedMsg output stackModel stackMsg topStackMsg -> Form.Builder (model -> validate) view model customError sharedMsg output ( componentModel, stackModel ) (Form.FieldStack.Msg componentMsg stackMsg) topStackMsg"},{"name":"finalize","comment":" finalize a Builder into a Form\n","type":"Form.Builder (model -> Form.Validate.Validation customError output) view model customError sharedMsg output stackModel stackMsg stackMsg -> Form.Form customError output sharedMsg model view stackModel stackMsg"},{"name":"group","comment":" Add a group of field (a Builder) to a form builder\n","type":"String.String -> (output -> groupOutput) -> Form.Builder (model -> Form.Validate.Validation customError groupOutput) groupView model customError sharedMsg groupOutput groupStackModel groupStackMsg topStackMsg -> Form.Builder (model -> Form.Validate.Validation customError groupOutput -> validate) (groupView -> view) model customError sharedMsg output stackModel stackMsg topStackMsg -> Form.Builder (model -> validate) view model customError sharedMsg output ( groupStackModel, stackModel ) (Form.FieldStack.Msg groupStackMsg stackMsg) topStackMsg"},{"name":"groupList","comment":" Add a list of groups to a form builder\n","type":"String.String -> (output -> List.List groupOutput) -> Form.Builder (model -> Form.Validate.Validation customError groupOutput) groupView model customError sharedMsg groupOutput groupStackModel groupStackMsg topStackMsg -> Form.Builder (model -> Form.Validate.Validation customError (List.List groupOutput) -> validate) (Form.GroupListView groupView topStackMsg -> view) model customError sharedMsg output stackModel stackMsg topStackMsg -> Form.Builder (model -> validate) view model customError sharedMsg output ( List.List groupStackModel, stackModel ) (Form.FieldStack.Msg ( Basics.Int, groupStackMsg ) stackMsg) topStackMsg"},{"name":"init","comment":" Initialize a new form builder\n","type":"{ validate : model -> validate, view : model -> view } -> Form.Builder (model -> validate) view model customError sharedMsg output () () topStackMsg"},{"name":"list","comment":" Add a list of stateless fields to a form builder\n","type":"String.String -> Maybe.Maybe (output -> List.List a) -> Form.Field.FieldDef output a -> Form.Builder (model -> Form.FieldListValidate customError a -> validate) (Form.FieldListViewState customError a topStackMsg -> view) model customError sharedMsg output stackModel stackMsg topStackMsg -> Form.Builder (model -> validate) view model customError sharedMsg output stackModel stackMsg topStackMsg"},{"name":"listWithState","comment":" Add a list of statefull fields to a form builder\n","type":"String.String -> Maybe.Maybe (output -> List.List a) -> Form.Field.FieldDef output a -> (Form.Field.FieldDef output a -> Form.FieldStack.FieldComponent customError a componentModel sharedMsg componentMsg) -> Form.Builder (model -> Form.FieldListValidate customError a -> validate) (Form.FieldComponentListViewState customError a topStackMsg componentModel componentMsg -> view) model customError sharedMsg output stackModel stackMsg topStackMsg -> Form.Builder (model -> validate) view model customError sharedMsg output ( List.List componentModel, stackModel ) (Form.FieldStack.Msg ( Basics.Int, componentMsg ) stackMsg) topStackMsg"}],"binops":[]},{"name":"Form.Error","comment":" Validation errors.\n\n@docs Error, ErrorValue, value\n\n","unions":[{"name":"ErrorValue","comment":" A validation error. See `Form.Validate.customError` for `CustomError` building.\n","args":["e"],"cases":[["Empty",[]],["InvalidString",[]],["InvalidEmail",[]],["InvalidFormat",[]],["InvalidInt",[]],["InvalidFloat",[]],["InvalidBool",[]],["SmallerIntThan",["Basics.Int"]],["GreaterIntThan",["Basics.Int"]],["SmallerFloatThan",["Basics.Float"]],["GreaterFloatThan",["Basics.Float"]],["ShorterStringThan",["Basics.Int"]],["LongerStringThan",["Basics.Int"]],["NotIncludedIn",[]],["CustomError",["e"]]]}],"aliases":[{"name":"Error","comment":" Tree of errors.\n","args":["e"],"type":"Form.Tree.Tree (Form.Error.ErrorValue e)"}],"values":[{"name":"value","comment":" Build a tree node (a leaf) for this error\n","type":"Form.Error.ErrorValue a -> Form.Error.Error a"}],"binops":[]},{"name":"Form.Field","comment":" Read and write field values.\n\n\n# Field definition\n\n@docs FieldDef, text, boolean, file, custom, withInitialValue\n\n\n# Constructors\n\n@docs Field, FieldValue, value, string, bool, group, list\n\n\n# Value readers\n\n@docs asString, asBool\n\n","unions":[{"name":"FieldDef","comment":" A field definition, can be added to a form builder\n","args":["data","a"],"cases":[["FieldDef",["Maybe.Maybe (data -> a)","a -> Form.Field.FieldValue","Form.Field.Field -> Maybe.Maybe a"]]]},{"name":"FieldValue","comment":" Form field. Can either be a group of named fields, or a final field.\n","args":[],"cases":[["String",["String.String"]],["Bool",["Basics.Bool"]],["File",["File.File"]],["EmptyField",[]]]}],"aliases":[{"name":"Field","comment":" A field is a tree node.\n","args":[],"type":"Form.Tree.Tree Form.Field.FieldValue"}],"values":[{"name":"asBool","comment":" Get field value as boolean.\n","type":"Form.Field.Field -> Maybe.Maybe Basics.Bool"},{"name":"asString","comment":" Get field value as string.\n","type":"Form.Field.Field -> Maybe.Maybe String.String"},{"name":"bool","comment":" Build a boolean field, for checkboxes.\n","type":"Basics.Bool -> Form.Field.Field"},{"name":"boolean","comment":" returns a field definition that store a Bool value\n","type":"Form.Field.FieldDef data Basics.Bool"},{"name":"custom","comment":" returns a field definition that store a custom type value\n","type":"(option -> String.String) -> (String.String -> Maybe.Maybe option) -> Form.Field.FieldDef data option"},{"name":"file","comment":" returns a field definition that store a File value\n","type":"Form.Field.FieldDef data File.File"},{"name":"group","comment":" Gather named fields as a group field.\n","type":"List.List ( String.String, Form.Field.Field ) -> Form.Field.Field"},{"name":"list","comment":" Gather fields as a list field.\n","type":"List.List Form.Field.Field -> Form.Field.Field"},{"name":"string","comment":" Build a string field, for text inputs, selects, etc.\n","type":"String.String -> Form.Field.Field"},{"name":"text","comment":" returns a field definition that store a String value\n","type":"Form.Field.FieldDef data String.String"},{"name":"value","comment":" Build a field from its value.\n","type":"Form.Field.FieldValue -> Form.Field.Field"},{"name":"withInitialValue","comment":" add a initial value loader to a field definition\n","type":"(data -> a) -> Form.Field.FieldDef data a -> Form.Field.FieldDef data a"}],"binops":[]},{"name":"Form.InputType","comment":"\n\n@docs InputType\n\n","unions":[{"name":"InputType","comment":" Input types to determine live validation behaviour.\n","args":[],"cases":[["Text",[]],["Textarea",[]],["Select",[]],["Radio",[]],["Checkbox",[]]]}],"aliases":[],"values":[],"binops":[]},{"name":"Form.Validate","comment":" Form validation.\n\n\n# Combinators\n\n@docs Validation, field, map, succeed, andThen, andMap, customError, defaultValue, mapError, withCustomError, sequence\n\n\n# Fixed-size forms\n\n@docs map2, map3, map4, map5, map6, map7, map8\n\n\n# Type extractors\n\n@docs list, string, int, float, bool, maybe, email, emptyString\n\n\n# Common filters\n\n@docs minInt, maxInt, minFloat, maxFloat, minLength, maxLength, nonEmpty, format, includedIn\n\n\n# Custom validations\n\n@docs fail, customValidation, oneOf\n\n","unions":[],"aliases":[{"name":"Validation","comment":" A validation is a function that takes a form field and returns a result\nbeing either a validation error or the expected object.\n","args":["customError","output"],"type":"Form.Field.Field -> Result.Result (Form.Error.Error customError) output"}],"values":[{"name":"andMap","comment":" Incremental form validation for records with more that 8 fields.\n\n    Form.Validate.succeed SomeRecord\n        |> andMap (field \"foo\" string)\n        |> andMap (field \"bar\" string)\n\n","type":"Form.Validate.Validation e a -> Form.Validate.Validation e (a -> b) -> Form.Field.Field -> Result.Result (Form.Error.Error e) b"},{"name":"andThen","comment":" Apply a new validation to the result of the validation.\n\n    field \"myfield\" (int |> andThen (minInt 10))\n\n","type":"(a -> Form.Validate.Validation e b) -> Form.Validate.Validation e a -> Form.Field.Field -> Result.Result (Form.Error.Error e) b"},{"name":"bool","comment":" Validation a Bool.\n","type":"Form.Field.Field -> Result.Result (Form.Error.Error e) Basics.Bool"},{"name":"customError","comment":" Helper to create a CustomError.\n","type":"e -> Form.Error.Error e"},{"name":"customValidation","comment":" Custom validation for your special cases.\n","type":"Form.Validate.Validation e a -> (a -> Result.Result (Form.Error.Error e) b) -> Form.Field.Field -> Result.Result (Form.Error.Error e) b"},{"name":"defaultValue","comment":" Rescue a failed validation with the supplied value.\n","type":"a -> Form.Validate.Validation e a -> Form.Field.Field -> Result.Result (Form.Error.Error e) a"},{"name":"email","comment":" Check if the string is a valid email address.\n","type":"Form.Validate.Validation e String.String"},{"name":"emptyString","comment":" Validate an empty string, otherwise failing with InvalidString.\nUseful with `oneOf` for optional fields with format validation.\n","type":"Form.Field.Field -> Result.Result (Form.Error.Error e) String.String"},{"name":"fail","comment":" A validation that always fails. Useful for contextual validation.\n","type":"Form.Error.Error e -> Form.Field.Field -> Result.Result (Form.Error.Error e) a"},{"name":"field","comment":" Access the given field in the group.\n\n    field \"name\" string\n\n","type":"String.String -> Form.Validate.Validation e a -> Form.Field.Field -> Result.Result (Form.Error.Error e) a"},{"name":"float","comment":" Validation a float using `String.toFloat`.\n","type":"Form.Field.Field -> Result.Result (Form.Error.Error e) Basics.Float"},{"name":"format","comment":" Validates format of the string.\n","type":"Regex.Regex -> String.String -> Form.Field.Field -> Result.Result (Form.Error.Error e) String.String"},{"name":"includedIn","comment":" Check if the string is included in the given list.\n","type":"List.List String.String -> String.String -> Form.Field.Field -> Result.Result (Form.Error.Error e) String.String"},{"name":"int","comment":" Validation an integer using `String.toInt`.\n","type":"Form.Field.Field -> Result.Result (Form.Error.Error e) Basics.Int"},{"name":"list","comment":" Validate a list of fields.\n","type":"Form.Validate.Validation e a -> Form.Field.Field -> Result.Result (Form.Error.Error e) (List.List a)"},{"name":"map","comment":" Map over the result of the validation.\n\n    field \"myfield\" (string |> map String.trim)\n\n","type":"(a -> b) -> Form.Validate.Validation e a -> Form.Field.Field -> Result.Result (Form.Error.Error e) b"},{"name":"map2","comment":" Validation a form with two fields.\n","type":"(a -> b -> m) -> Form.Validate.Validation e a -> Form.Validate.Validation e b -> Form.Validate.Validation e m"},{"name":"map3","comment":" Validation a form with three fields.\n","type":"(a -> b -> c -> m) -> Form.Validate.Validation e a -> Form.Validate.Validation e b -> Form.Validate.Validation e c -> Form.Validate.Validation e m"},{"name":"map4","comment":" Validation a form with four fields.\n","type":"(a -> b -> c -> d -> m) -> Form.Validate.Validation e a -> Form.Validate.Validation e b -> Form.Validate.Validation e c -> Form.Validate.Validation e d -> Form.Validate.Validation e m"},{"name":"map5","comment":" Validation a form with five fields.\n","type":"(a -> b -> c -> d -> e -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err m"},{"name":"map6","comment":" Validation a form with six fields.\n","type":"(a -> b -> c -> d -> e -> f -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err f -> Form.Validate.Validation err m"},{"name":"map7","comment":" Validation a form with seven fields.\n","type":"(a -> b -> c -> d -> e -> f -> g -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err f -> Form.Validate.Validation err g -> Form.Validate.Validation err m"},{"name":"map8","comment":" Validation a form with eight fields.\n","type":"(a -> b -> c -> d -> e -> f -> g -> h -> m) -> Form.Validate.Validation err a -> Form.Validate.Validation err b -> Form.Validate.Validation err c -> Form.Validate.Validation err d -> Form.Validate.Validation err e -> Form.Validate.Validation err f -> Form.Validate.Validation err g -> Form.Validate.Validation err h -> Form.Validate.Validation err m"},{"name":"mapError","comment":" Call Result.mapError on validation result.\n","type":"(Form.Error.Error e1 -> Form.Error.Error e2) -> Form.Validate.Validation e1 a -> Form.Validate.Validation e2 a"},{"name":"maxFloat","comment":" Max value for Float.\n","type":"Basics.Float -> Basics.Float -> Form.Field.Field -> Result.Result (Form.Error.Error e) Basics.Float"},{"name":"maxInt","comment":" Max value for Int.\n","type":"Basics.Int -> Basics.Int -> Form.Field.Field -> Result.Result (Form.Error.Error e) Basics.Int"},{"name":"maxLength","comment":" Max length for String.\n","type":"Basics.Int -> String.String -> Form.Field.Field -> Result.Result (Form.Error.Error e) String.String"},{"name":"maybe","comment":" Transform validation result to `Maybe`, using `Result.toMaybe`.\n","type":"Form.Validate.Validation e a -> Form.Field.Field -> Result.Result (Form.Error.Error e) (Maybe.Maybe a)"},{"name":"minFloat","comment":" Min value for Float.\n","type":"Basics.Float -> Basics.Float -> Form.Field.Field -> Result.Result (Form.Error.Error e) Basics.Float"},{"name":"minInt","comment":" Min value for Int.\n","type":"Basics.Int -> Basics.Int -> Form.Field.Field -> Result.Result (Form.Error.Error e) Basics.Int"},{"name":"minLength","comment":" Min length for String.\n","type":"Basics.Int -> String.String -> Form.Field.Field -> Result.Result (Form.Error.Error e) String.String"},{"name":"nonEmpty","comment":" Fails if `String.isEmpty`.\n","type":"String.String -> Form.Field.Field -> Result.Result (Form.Error.Error e) String.String"},{"name":"oneOf","comment":" First successful validation wins, from left to right.\n","type":"List.List (Form.Validate.Validation e a) -> Form.Field.Field -> Result.Result (Form.Error.Error e) a"},{"name":"sequence","comment":" Combine a list of validations into a validation producing a list of all\nresults.\n","type":"List.List (Form.Validate.Validation e a) -> Form.Validate.Validation e (List.List a)"},{"name":"string","comment":" Validation a String.\n","type":"Form.Field.Field -> Result.Result (Form.Error.Error e) String.String"},{"name":"succeed","comment":" A validation that always succeeds. Useful for contextual validation.\n","type":"a -> Form.Field.Field -> Result.Result (Form.Error.Error e) a"},{"name":"withCustomError","comment":" Arrange that if a validation fails, it has the given custom error.\n\n    field \"customerId\"\n        (V.int\n            |> andThen (minInt 1)\n            |> andThen (maxInt 9999)\n            |> withCustomError InvalidIdentity\n        )\n\n","type":"customErr -> Form.Validate.Validation e a -> Form.Validate.Validation customErr a"}],"binops":[]}]